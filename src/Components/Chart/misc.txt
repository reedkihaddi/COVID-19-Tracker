// THIS IS THE LINE CHART
var lineGen = d3.line()
            .curve(d3.curveBasis)
            .x(function (d) {
                return x(d.date);
            })
            .y(function (d) {
                return y(d.confirmed);
            });

        dataGroup.forEach(function (d, i) {
            svg.append('path')
                .attr('d', lineGen(d.values))
                .attr('stroke', 'blue')
                .attr('stroke-width', 1)
                .attr('fill', 'none')

        });


//Ayy

 var dataGroup = d3.nest()
            .key(function (d) {
                return d.state;
            })
            .entries(props.dailyDataAll)

        var margin = {
            top: 30,
            right: 20,
            bottom: 30,
            left: 140
        },

            width = 1400 - margin.left - margin.right,
            height = 540 - margin.top - margin.bottom;

        var svg = d3.select('.MultiLineChart')
            .append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

        var x = d3.scaleTime()
            .domain(d3.extent(props.dailyDataAll, function (d) { return d.date }))
            .range([0, width]);
        svg.append('g')
            .attr('transform', 'translate(0,' + height + ')')
            .call(d3.axisBottom(x));

        var y = d3.scaleLinear()
            .domain(d3.extent(props.dailyDataAll, function (d) { return d.confirmed }))
            .range([height, 0])

        var yName = d3.scaleBand()
            .domain(stateName)
            .range([0, height])
            .paddingInner(1)
        svg.append("g")
            .call(d3.axisLeft(yName));




function AgeChart(props) {
    if (props.DataAll[0]) {
        var margin = { top: 10, right: 10, bottom: 10, left: 10 },
            width = 1150 - margin.left - margin.right,
            height = 550 - margin.top - margin.bottom;

        var svg = d3.select(".AgeChart")
            .attr('id', 'AgeChart')
            .append("svg")
            .classed('my-svg-agechart', true)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .call(responsivefy)
        //.attr("transform", "translate(" + width / 8 + "," + -10 + ")");

        function make_y_gridline() {
            return d3.axisLeft(y).ticks(4)
        }

        var check = props.dataGroup.filter(function (d) {
            return d.key == "Delhi"
        })

        var len = check[0].values.length - 1
        var valuesCases = [check[0].values[len].confirmed, check[0].values[len].recovered, check[0].values[len].deceased]


        var x = d3.scaleTime()
            .domain(d3.extent(check[0].values, function (d) { return d.date }))
            .range([40, width - width / 6 - width / 4]);

        var y = d3.scaleLinear()
            .domain(d3.extent(check[0].values, function (d) { return d.fatality }))
            .range([height, 100])

        var yAxis =
            svg.append('g')
                .classed('y-axis', true)
                .call(y.axis = d3.axisRight(y)
                    .ticks(4)
                    .tickSize(0)
                    .tickPadding(0)
                    .tickFormat(function (d) {
                        return d + '%'
                    }))


        svg.selectAll(".tick")
            .filter(function (d) { return d === 0; })
            .remove();

        //linearRegression = d3.regressionLinear()

        var grid = svg.append('g')
            .attr('class', 'grid')
            .call(make_y_gridline().tickSize(-width + width / 6 + width / 4).tickSizeOuter(0).tickFormat(""))

        var xAxis =
            svg.append('g')
                .classed('x-axis', true)
                .attr('transform', 'translate(0,' + height + ')')
                .call(d3.axisBottom(x).ticks(4));

        var fatality = svg
            .selectAll("dot")
            .append('g')
            .classed('fatality', true)
            .data(check[0].values.filter(function (d) {
                return d.fatality > 0
            }))
            .enter()
            .append("circle")
            .attr('cx', (function (d, i) {
                return x(d.date)
            }))
            .attr('cy', (function (d, i) { return y(d.fatality) }))
            .attr("r", 3.5)
            .style("fill", "#E05759")

        var headinig = svg.append('text')
            .attr("y", d => 50)
            .attr("x", d => 50)
            .style("font-size", "20px")
            .style('font-weight', 600)
            .text("Fatality Rate")
            .style('fill', '#E05759')

        var subheadinig = svg.append('text')
            .attr("y", d => 70)
            .attr("x", d => 50)
            .style("font-size", "10px")
            .style('font-weight', 600)
            .text("% of deaths as proportion to total cases")
            .style('fill', 'gray')

        function update(selectedGroup) {
            var dataFilter = props.dataGroup.filter(function (d) {
                return d.key == selectedGroup
            })

            var len = dataFilter[0].values.length - 1
            //var date = dataFilter[0].values[len].date
            //var circle_y = [dataFilter[0].values[len].confirmed, dataFilter[0].values[len].recovered, dataFilter[0].values[len].deceased]

            x.domain(d3.extent(dataFilter[0].values, function (d) { return d.date }))
                .range([0, width - width / 6 - width / 4]);
            y.domain(d3.extent(dataFilter[0].values, function (d) { return d.fatality }))
            //console.log(d3.extent(dataFilter[0].values,function(d){return d.confirmed}))

            xAxis.attr("transform", "translate(0," + y(0) + ")")
                .call(d3.axisBottom(x).ticks(4));

            yAxis.call(y.axis = d3.axisLeft(y)
                .ticks(4)
                .tickSize(0)
                .tickPadding(0)
                .tickFormat(function (d) {
                    return d + '%'
                }))

            grid.call(make_y_gridline().tickSize(-width + width / 6 + width / 4).tickSizeOuter(0).tickFormat(""))

            fatality
                .data(dataFilter[0].values.filter(function (d) {
                    return d.fatality > 0
                }))
                .transition()
                .duration(1000)
                .attr('cx', (function (d, i) {
                    return x(d.date)
                }))
                .attr('cy', (function (d, i) { return y(d.fatality) }))
        }

    }
    return null;
}